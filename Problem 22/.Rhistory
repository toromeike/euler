s <- lines[[1]]
s
paths <- t(apply(t(expand.grid(rep(list(0:1), 3))), 2, cumsum)) + 1
current_max <- 0
for(i in 1:nrow(paths)){
s <- lines[[1]]
k <- 2
for(j in paths[i,]){
s <- s + lines[[k]][j]
k <- k + 1
}
if(s > current_max){
current_max <- s
}
}
print(current_max)
nrow(paths)
paths
75 + 95 + 82
75 + 95 + 82 + 87
75 + 95 + 47 + 87
75 + 64 + 82 + 87
library(combinat)
nums <- "75
95 64
17 47 82
18 35 87 10
20 04 82 47 65
19 01 23 75 03 34
88 02 77 73 07 63 67
99 65 04 28 06 16 70 92
41 41 26 56 83 40 80 70 33
41 48 72 33 47 32 37 16 94 29
53 71 44 65 25 43 91 52 97 51 14
70 11 33 28 77 73 17 78 39 68 17 57
91 71 52 38 17 14 91 43 58 50 27 29 48
63 66 04 68 89 53 67 30 73 16 69 87 40 31
04 62 98 27 23 09 70 98 73 93 38 53 60 04 23"
lines <- strsplit(nums, "\n", fixed = TRUE)
lines <- lapply(lines, function(x) strsplit(x, " "))[[1]]
lines <- lapply(lines, as.numeric)
paths <- t(apply(t(expand.grid(rep(list(0:1), 14))), 2, cumsum)) + 1
current_max <- 0
for(i in 1:nrow(paths)){
s <- lines[[1]]
k <- 2
for(j in paths[i,]){
s <- s + lines[[k]][j]
k <- k + 1
}
if(s > current_max){
current_max <- s
}
}
print(current_max)
years <- 1901:2000
leap_years <- years[years %% 4 == 0]
leap_years
non_leap_years <- 1901:2000
ndays <- 366*length(leap_years) + 365*length(non_leap_years)
ndays
non_leap_years
non_leap_years <- years[years %% 4 != 0]
non_leap_years <- years[years %% 4 != 0]
non_leap_years
ndays <- 366*length(leap_years) + 365*length(non_leap_years)
ndays
sundays <- days[days %% 7 == 6]
days <- 1:ndays
sundays <- days[days %% 7 == 6]
sundays
library(lubridate)
?ymd
start <- ymd("1901-01-01")
start
end <- ymd("2000-12-31")
?lubridate
i <- interval(start, end)
i
start:end
start + 1
end - start
attributes(end - start)
length(end - start)
?difftime
as.numeric(end -start)
days <- start + 1:l
l <- as.numeric(end - start)
days <- start + 1:l
days
ymd("2020-02-30")
weekdays(start)
wday(start, label = FALSE, abbr = TRUE,
week_start = getOption("lubridate.week.start", 7),
locale = Sys.getlocale("LC_TIME"))
?wday
wday(start)
wday(ymd("2020-06-26"))
wday(ymd("2020-06-28"))
wday(ymd("2020-06-27"))
sundays <- days[wday(days) == 1]
sundays
today <- ymd("2020-06-26")
day(today)
library(lubridate)
start <- ymd("1901-01-01")
end <- ymd("2000-12-31")
l <- as.numeric(end - start)
days <- start + 1:l
sundays_on_first <- days[wday(days) == 1 & day(days) == 1]
length(sundays_on_first)
sprintf("%.0f", factorial(20))
sprintf("%.0f", factorial(30))
sprintf("%.0f", factorial(50))
sprintf("%.0f", factorial(60))
sprintf("%.0f", factorial(70))
sprintf("%.0f", factorial(80))
sprintf("%.0f", factorial(100))
?lfactorial
?lfactorial(100)
lfactorial(100)
2^1000
?ks.test
ks.test(c(1,2,3,4,5,6,7,9), y = pnorm)
ks.test(c(1,2,3,4,5,6,7,9), y = pnorm)$D
attributes(ks.test(c(1,2,3,4,5,6,7,9), y = pnorm))
ks.test(c(1,2,3,4,5,6,7,9), y = pnorm)$statistic
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
path <- "C:\\Users\\d91913\\Documents\\R\\Immobilienrisiko\\
Verteilung Teilmarktindex\\AF11_Test_Normalverteilungsannahme.xlsx"
path <- str_remove_all(path, pattern = "\n")
tm <- read_xlsx(path,
sheet = "TM-Index",
range = "A4:F55",
col_names = FALSE)
colnames(tm) <- c("date", "tm1", "tm2", "tm3", "tm4", "tm5")
tm.tidy <- tm %>%
pivot_longer(-date, names_to = "tm", values_to = "rendite") %>%
mutate(date = as.Date(date))
tm.tidy_yearly <- tm.tidy %>% mutate(year = year(date)) %>%
group_by(tm, year) %>%
summarise(rendite = prod(1+rendite)-1)
# tm.tidy_yearly  %>%
#     ggplot(aes(sample = rendite, group = tm, col = tm)) +
#     geom_qq() +
#     geom_qq_line() +
#     facet_wrap(~tm)
tm.tidy_yearly  %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite)$statistic,
ks_p = ks.test(rendite)$p.value)
tm.tidy_yearly  %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite)$statistic,
ks_p = ks.test(rendite)$p.value)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
path <- "C:\\Users\\d91913\\Documents\\R\\Immobilienrisiko\\
Verteilung Teilmarktindex\\AF11_Test_Normalverteilungsannahme.xlsx"
path <- str_remove_all(path, pattern = "\n")
tm <- read_xlsx(path,
sheet = "TM-Index",
range = "A4:F55",
col_names = FALSE)
colnames(tm) <- c("date", "tm1", "tm2", "tm3", "tm4", "tm5")
tm.tidy <- tm %>%
pivot_longer(-date, names_to = "tm", values_to = "rendite") %>%
mutate(date = as.Date(date))
tm.tidy_yearly <- tm.tidy %>% mutate(year = year(date)) %>%
group_by(tm, year) %>%
summarise(rendite = prod(1+rendite)-1)
# tm.tidy_yearly  %>%
#     ggplot(aes(sample = rendite, group = tm, col = tm)) +
#     geom_qq() +
#     geom_qq_line() +
#     facet_wrap(~tm)
tm.tidy_yearly  %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite)$statistic,
ks_p = ks.test(rendite)$p.value)
tm.tidy_yearly  %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm)$statistic,
ks_p = ks.test(rendite, y = pnorm)$p.value)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
path <- "C:\\Users\\d91913\\Documents\\R\\Immobilienrisiko\\
Verteilung Teilmarktindex\\AF11_Test_Normalverteilungsannahme.xlsx"
path <- str_remove_all(path, pattern = "\n")
tm <- read_xlsx(path,
sheet = "TM-Index",
range = "A4:F55",
col_names = FALSE)
colnames(tm) <- c("date", "tm1", "tm2", "tm3", "tm4", "tm5")
tm.tidy <- tm %>%
pivot_longer(-date, names_to = "tm", values_to = "rendite") %>%
mutate(date = as.Date(date))
tm.tidy_yearly <- tm.tidy %>% mutate(year = year(date)) %>%
group_by(tm, year) %>%
summarise(rendite = prod(1+rendite)-1)
# tm.tidy_yearly  %>%
#     ggplot(aes(sample = rendite, group = tm, col = tm)) +
#     geom_qq() +
#     geom_qq_line() +
#     facet_wrap(~tm)
tm.tidy_yearly  %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm)$statistic,
ks_p = ks.test(rendite, y = pnorm)$p.value)
tm.tidy %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm)$statistic,
ks_p = ks.test(rendite, y = pnorm)$p.value)
tm.tidy %>%
group_by(tm)
dim(tm.tidy)
nrow(tm.tidy)
dev <- runif(nrow(tm.tidy)) * 1e6
dev
dev <- runif(nrow(tm.tidy)) * 1e-6
dev
tm.tidy %>%
group_by(tm) %>%
mutate(rendite = rendite + dev)
tm.tidy %>%
mutate(rendite = rendite + dev) %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm)$statistic,
ks_p = ks.test(rendite, y = pnorm)$p.value)
?pnorm
tm.tidy %>%
mutate(rendite = rendite + dev) %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value)
r <- rnorm(50, mean = 5, sd = 3)
shapiro.test(r)
shapiro.test(rnorm(50, mean = 5, sd = 3))
shapiro.test(rnorm(50, mean = 5, sd = 3))
shapiro.test(rnorm(50, mean = 5, sd = 3))
shapiro.test(rnorm(50, mean = 5, sd = 3))
shapiro.test(rnorm(50, mean = 5, sd = 3))
shapiro.test(rnorm(50, mean = 5, sd = 3))
shapiro.test(rnorm(50, mean = 5, sd = 3))
shapiro.test(rnorm(50, mean = 5, sd = 6))
tm.tidy %>%
mutate(rendite = rendite + dev) %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value)
tm.tidy_yearly %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value)
library(nortest)
lillie.test(rnorm(50, mean = 5, sd = 3))
lillie.test(rnorm(50, mean = 5, sd = 3))$statistic
lillie.test(rnorm(50, mean = 5, sd = 3))$p.value
tm.tidy %>%
mutate(rendite = rendite + dev) %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value,
lillie_d = lillie.test(rendite)$statistic,
lillie_p = lillie.test(rendite)$p.value)
tm.tidy_yearly %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value,
lillie_d = lillie.test(rendite)$statistic,
lillie_p = lillie.test(rendite)$p.value)
tm.tidy_yearly  %>%
ggplot(aes(sample = rendite, group = tm, col = tm)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~tm)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
path <- "C:\\Users\\d91913\\Documents\\R\\Immobilienrisiko\\
Verteilung Teilmarktindex\\AF11_Test_Normalverteilungsannahme.xlsx"
path <- str_remove_all(path, pattern = "\n")
tm <- read_xlsx(path,
sheet = "TM-Index",
range = "A4:F55",
col_names = FALSE)
colnames(tm) <- c("date", "tm1", "tm2", "tm3", "tm4", "tm5")
tm.tidy <- tm %>%
pivot_longer(-date, names_to = "tm", values_to = "rendite") %>%
mutate(date = as.Date(date))
tm.tidy_yearly <- tm.tidy %>% mutate(year = year(date)) %>%
group_by(tm, year) %>%
summarise(rendite = prod(1+rendite)-1)
tm.tidy_yearly  %>%
ggplot(aes(sample = rendite, group = tm, col = tm)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~tm)
dev <- runif(nrow(tm.tidy)) * 1e-6
tm.tidy %>%
mutate(rendite = rendite + dev) %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value,
lillie_d = lillie.test(rendite)$statistic,
lillie_p = lillie.test(rendite)$p.value)
tm.tidy_yearly %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value,
lillie_d = lillie.test(rendite)$statistic,
lillie_p = lillie.test(rendite)$p.value)
library(readxl)
library(stringr)
library(tidyr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(MASS)
library(nortest)
path <- "C:\\Users\\d91913\\Documents\\R\\Immobilienrisiko\\
Verteilung Teilmarktindex\\AF11_Test_Normalverteilungsannahme.xlsx"
path <- str_remove_all(path, pattern = "\n")
tm <- read_xlsx(path,
sheet = "TM-Index",
range = "A4:F55",
col_names = FALSE)
colnames(tm) <- c("date", "tm1", "tm2", "tm3", "tm4", "tm5")
tm.tidy <- tm %>%
pivot_longer(-date, names_to = "tm", values_to = "rendite") %>%
mutate(date = as.Date(date))
tm.tidy_yearly <- tm.tidy %>% mutate(year = year(date)) %>%
group_by(tm, year) %>%
summarise(rendite = prod(1+rendite)-1)
tm.tidy_yearly  %>%
ggplot(aes(sample = rendite, group = tm, col = tm)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~tm)
dev <- runif(nrow(tm.tidy)) * 1e-6
tm.tidy %>%
mutate(rendite = rendite + dev) %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value,
lillie_d = lillie.test(rendite)$statistic,
lillie_p = lillie.test(rendite)$p.value)
tm.tidy_yearly %>%
group_by(tm) %>%
summarize(shapiro_p = shapiro.test(rendite)$p.value,
ks_d = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$statistic,
ks_p = ks.test(rendite, y = pnorm, mean = mean(rendite), sd = sd(rendite))$p.value,
lillie_d = lillie.test(rendite)$statistic,
lillie_p = lillie.test(rendite)$p.value)
tm
library(numbers)
divisors(6)
sum(divisors(6))-6
sum_divs <- function(x){
return(sum(divisors(x)) - x)
}
sum_divs(19)
sum_divs(51)
sum_divs(18)
library(numbers)
sum_divs <- function(x){
return(sum(divisors(x)) - x)
}
nums <- 2:9999
df <- data.frame(nums = nums, sdiv = sumdivs(nums))
library(numbers)
sum_divs <- function(x){
return(sum(divisors(x)) - x)
}
nums <- 2:9999
df <- data.frame(nums = nums, sdiv = sum_divs(nums))
sdiv <- sapply(nums, sum_divs)
sdiv
library(numbers)
sum_divs <- function(x){
return(sum(divisors(x)) - x)
}
nums <- 2:9999
sdiv <- sapply(nums, sum_divs)
sdiv2 <- sapply(sdiv, sum_divs)
df <- data.frame(nums = nums,
sdiv = sdiv,
sdiv2 = sdiv2)
sel <- (df$nums == df$sdiv) & (df$sdiv == df$sdiv2)
sum(df$nums[sel])
df[sel,]
sel <- (df$nums != df$sdiv) & (df$sdiv == df$sdiv2)
df[sel,]
sum_divs(25)
sum_divs(6)
sel <- (df$nums != df$sdiv) & (df$nums == df$sdiv2)
df[sel,]
sum(df$nums[sel,])
sum(df$nums[sel])
rm(ggplot2)
ls(all.names = TRUE)
letters <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K",
"L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
"W", "X", "Y", "Z")
score <- function(x){
splt <- unlist(strsplit(x, split = ""))
return( sum(sapply(splt, function(x) which(x == letters))) )
}
name <- readChar("p022_names.txt", file.info("p022_names.txt")$size)
name <- unlist(strsplit(name, split = ",", fixed = FALSE))
name <- substring(name, 2, nchar(name) - 2)
sorted_names <- sort(name)
df <- data.frame(id = 1:length(name),
names = sorted_names,
score = sapply(sorted_names, score))
setwd("~/Programmieren/Project Euler/Problem 22")
letters <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K",
"L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
"W", "X", "Y", "Z")
score <- function(x){
splt <- unlist(strsplit(x, split = ""))
return( sum(sapply(splt, function(x) which(x == letters))) )
}
name <- readChar("p022_names.txt", file.info("p022_names.txt")$size)
name <- unlist(strsplit(name, split = ",", fixed = FALSE))
name <- substring(name, 2, nchar(name) - 2)
sorted_names <- sort(name)
df <- data.frame(id = 1:length(name),
names = sorted_names,
score = sapply(sorted_names, score))
head(df)
name
nchar(name)
min(nchar(name))
name <- readChar("p022_names.txt", file.info("p022_names.txt")$size)
min(nchar(name))
name <- unlist(strsplit(name, split = ",", fixed = FALSE))
min(nchar(name))
which.min(nchar(name))
name(which.min(nchar(name)))
name[which.min(nchar(name))]
name <- substring(name, 2, nchar(name))
name[which.min(nchar(name))]
name <- readChar("p022_names.txt", file.info("p022_names.txt")$size)
name <- unlist(strsplit(name, split = ",", fixed = FALSE))
name <- substring(name, 2, nchar(name) - 1)
name[which.min(nchar(name))]
letters <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K",
"L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
"W", "X", "Y", "Z")
score <- function(x){
splt <- unlist(strsplit(x, split = ""))
return( sum(sapply(splt, function(x) which(x == letters))) )
}
name <- readChar("p022_names.txt", file.info("p022_names.txt")$size)
name <- unlist(strsplit(name, split = ",", fixed = FALSE))
name <- substring(name, 2, nchar(name) - 1)
sorted_names <- sort(name)
df <- data.frame(id = 1:length(name),
names = sorted_names,
score = sapply(sorted_names, score))
head(df)
letters <- c("A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K",
"L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
"W", "X", "Y", "Z")
score <- function(x){
splt <- unlist(strsplit(x, split = ""))
return( sum(sapply(splt, function(x) which(x == letters))) )
}
name <- readChar("p022_names.txt", file.info("p022_names.txt")$size)
name <- unlist(strsplit(name, split = ",", fixed = FALSE))
name <- substring(name, 2, nchar(name) - 1)
sorted_names <- sort(name)
df <- data.frame(id = 1:length(name),
names = sorted_names,
score = sapply(sorted_names, score))
print(sum(df$id * df$score))
